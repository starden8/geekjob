・Java EE（Java Platform, Enterprise Edition）
Javaによるエンタープライズシステムを構築するための技術の取り扱い方を定めたAPIやフレームワーク・ライブラリの集合のことを指す。
大規模システム向けのフレームワークであり、企業システムの構築に必要な機能をまとめて提供する。
〈特徴〉
JavaEEのみで開発が可能。
オープンなコミュニティ「Java Community Process（JCP）」で策定されている。
デメリットは仕様が大きいため変化に時間がかかること等。


・Apache Wicket（アパッチ・ウィケット）
Apacheソフトウェア財団のApache Wicketプロジェクトにて開発されているオープンソースのJava Webアプリケーションフレームワーク。
〈特徴〉
ほとんどをJavaで記述する
ページをオブジェクトのひとつとして扱うため、Webアプリケーションフレームワークでありながら、デスクトップアプリケーションフレームワークの考え方を採用している。
設定ファイルを使わないため、設定管理をしなくていい。
デメリットはメモリ不足の懸念等。

・Play Framework
オープンソースのWebアプリケーションフレームワーク。
JavaとScalaで記述されているが、元はRuby on Rails（Rubyのフレームワーク）とDjango（Pythonのフレームワーク）から大きな影響を受けている。
〈特徴〉
CPUリソースやメモリ使用量が少ないので軽量なシステム開発に向いており、また利用者が多いWebアプリケーションにも対応できる。
コンパイル・サーバーの再起動が不要。
コードを修正すると変更内容が直ちに反映される。
またMVCアーキテクチャ適用やIDEに依存しない等のメリットもある。、
デメリットは独自性が強く学習コストがかかること等。

・Spring Framework
Javaプラットフォーム向けのオープンソースフレームワーク。
特定のプログラミングモデルを強制するものではなく、EJBモデルの代替え・置き換え・追加をするフレームワークとして認知されている。
〈特徴〉
基盤となる7種類のモジュールで構成されているため学習難度が低い
独自のテストプログラムを使用できる。
DI(Dependency Injection：依存性注入)が採用されているため、保守性が高く、システムを改修する場合も最低限の変更で済ませることができる。
　※依存性注入とは、オブジェクトの成立に必要なコードを分離し、プログラム実行時に注入する手法です。
　　例えば、2つのクラスの間に依存関係があり、そのうちの1つのクラスが完成していない場合、通常、完成済みのクラスをテストすることはできない。
　　しかし、依存性注入によってクラスの依存関係が解消され完成済みクラスをテストすることができるようになる。
デメリットは日本語で書かれた情報が少ないこと等。
